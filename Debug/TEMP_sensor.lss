
TEMP_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002c98  00002d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800180  00800180  00002e4c  2**0
                  ALLOC
  3 .stab         00002940  00000000  00000000  00002e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106f  00000000  00000000  0000578c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000067fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000699b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <main>
      8a:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 58       	subi	r30, 0x80	; 128
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <timer1_FAST_PWM_init_vid>:
#include "timer1PWM_pri.h"

u8 u8overflowCounter=0;

void timer1_FAST_PWM_init_vid(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
     e36:	ec e4       	ldi	r30, 0x4C	; 76
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	11 82       	std	Z+1, r1	; 0x01
     e3c:	10 82       	st	Z, r1
	ICR1=2499;
     e3e:	e6 e4       	ldi	r30, 0x46	; 70
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	83 ec       	ldi	r24, 0xC3	; 195
     e44:	99 e0       	ldi	r25, 0x09	; 9
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24

	  SET_BIT(TCCR1B,0);
     e4a:	ae e4       	ldi	r26, 0x4E	; 78
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ee e4       	ldi	r30, 0x4E	; 78
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24
	  SET_BIT(TCCR1B,1);
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	8c 93       	st	X, r24

	  SET_BIT(TCCR1B,3);
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8c 93       	st	X, r24
	  SET_BIT(TCCR1B,4);
     e74:	ae e4       	ldi	r26, 0x4E	; 78
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ee e4       	ldi	r30, 0x4E	; 78
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	8c 93       	st	X, r24


	  CLR_BIT(TCCR1A,0);
     e82:	af e4       	ldi	r26, 0x4F	; 79
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ef e4       	ldi	r30, 0x4F	; 79
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	8c 93       	st	X, r24
	  SET_BIT(TCCR1A,1);
     e90:	af e4       	ldi	r26, 0x4F	; 79
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ef e4       	ldi	r30, 0x4F	; 79
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	8c 93       	st	X, r24
	  SET_BIT(TCCR1A,7);
     e9e:	af e4       	ldi	r26, 0x4F	; 79
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ef e4       	ldi	r30, 0x4F	; 79
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	8c 93       	st	X, r24

}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <Timer_set_dutyCycle>:

void Timer_set_dutyCycle(u16 Copy_u8_OCR1)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <Timer_set_dutyCycle+0x6>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u8_OCR1;
     ec0:	ea e4       	ldi	r30, 0x4A	; 74
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24

}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_SetPinDirection>:
#include "DIO_pri.h"

/*function definetion*/

void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinDirCopy)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	27 97       	sbiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
     eee:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= PORTD) &&(u8PinIdCopy <= PIN7))
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <DIO_SetPinDirection+0x22>
     ef6:	ee c0       	rjmp	.+476    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	88 30       	cpi	r24, 0x08	; 8
     efc:	08 f0       	brcs	.+2      	; 0xf00 <DIO_SetPinDirection+0x2a>
     efe:	ea c0       	rjmp	.+468    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
	{
		if (u8PinDirCopy == OUTPUT)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	09 f0       	breq	.+2      	; 0xf08 <DIO_SetPinDirection+0x32>
     f06:	6f c0       	rjmp	.+222    	; 0xfe6 <DIO_SetPinDirection+0x110>
		{
			/*check on the reguired PORT number*/
			switch(u8PortIdCopy)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3f 83       	std	Y+7, r19	; 0x07
     f10:	2e 83       	std	Y+6, r18	; 0x06
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	49 f1       	breq	.+82     	; 0xf6e <DIO_SetPinDirection+0x98>
     f1c:	2e 81       	ldd	r18, Y+6	; 0x06
     f1e:	3f 81       	ldd	r19, Y+7	; 0x07
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	2c f4       	brge	.+10     	; 0xf30 <DIO_SetPinDirection+0x5a>
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	61 f0       	breq	.+24     	; 0xf46 <DIO_SetPinDirection+0x70>
     f2e:	d2 c0       	rjmp	.+420    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
     f30:	2e 81       	ldd	r18, Y+6	; 0x06
     f32:	3f 81       	ldd	r19, Y+7	; 0x07
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	71 f1       	breq	.+92     	; 0xf96 <DIO_SetPinDirection+0xc0>
     f3a:	8e 81       	ldd	r24, Y+6	; 0x06
     f3c:	9f 81       	ldd	r25, Y+7	; 0x07
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	e9 f1       	breq	.+122    	; 0xfbe <DIO_SetPinDirection+0xe8>
     f44:	c7 c0       	rjmp	.+398    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
			{

			case PORTA : SET_BIT(DDRA_register,u8PinIdCopy);break;
     f46:	aa e3       	ldi	r26, 0x3A	; 58
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_SetPinDirection+0x8e>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_SetPinDirection+0x8a>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	b3 c0       	rjmp	.+358    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
			case PORTB : SET_BIT(DDRB_register,u8PinIdCopy);break;
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_SetPinDirection+0xb6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_SetPinDirection+0xb2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	9f c0       	rjmp	.+318    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
			case PORTC : SET_BIT(DDRC_register,u8PinIdCopy);break;
     f96:	a4 e3       	ldi	r26, 0x34	; 52
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_SetPinDirection+0xde>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_SetPinDirection+0xda>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	8b c0       	rjmp	.+278    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
			case PORTD : SET_BIT(DDRD_register,u8PinIdCopy);break;
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_SetPinDirection+0x106>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_SetPinDirection+0x102>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	77 c0       	rjmp	.+238    	; 0x10d4 <DIO_SetPinDirection+0x1fe>

			}
		}
		else if (u8PinDirCopy ==INPUT)
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <DIO_SetPinDirection+0x118>
     fec:	73 c0       	rjmp	.+230    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
		{
			switch(u8PortIdCopy)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3d 83       	std	Y+5, r19	; 0x05
     ff6:	2c 83       	std	Y+4, r18	; 0x04
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	59 f1       	breq	.+86     	; 0x1058 <DIO_SetPinDirection+0x182>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	2c f4       	brge	.+10     	; 0x1016 <DIO_SetPinDirection+0x140>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	69 f0       	breq	.+26     	; 0x102e <DIO_SetPinDirection+0x158>
    1014:	5f c0       	rjmp	.+190    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
    1016:	2c 81       	ldd	r18, Y+4	; 0x04
    1018:	3d 81       	ldd	r19, Y+5	; 0x05
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	89 f1       	breq	.+98     	; 0x1082 <DIO_SetPinDirection+0x1ac>
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_SetPinDirection+0x156>
    102a:	40 c0       	rjmp	.+128    	; 0x10ac <DIO_SetPinDirection+0x1d6>
    102c:	53 c0       	rjmp	.+166    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
						{

						case PORTA : CLR_BIT(DDRA_register,u8PinIdCopy);break;
    102e:	aa e3       	ldi	r26, 0x3A	; 58
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e3       	ldi	r30, 0x3A	; 58
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_SetPinDirection+0x176>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_SetPinDirection+0x172>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	3e c0       	rjmp	.+124    	; 0x10d4 <DIO_SetPinDirection+0x1fe>
						case PORTB : CLR_BIT(DDRB_register,u8PinIdCopy);break;
    1058:	a7 e3       	ldi	r26, 0x37	; 55
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e7 e3       	ldi	r30, 0x37	; 55
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_SetPinDirection+0x1a0>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_SetPinDirection+0x19c>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	29 c0       	rjmp	.+82     	; 0x10d4 <DIO_SetPinDirection+0x1fe>
						case PORTC : CLR_BIT(DDRC_register,u8PinIdCopy);break;
    1082:	a4 e3       	ldi	r26, 0x34	; 52
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e4 e3       	ldi	r30, 0x34	; 52
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_SetPinDirection+0x1ca>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_SetPinDirection+0x1c6>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <DIO_SetPinDirection+0x1fe>
						case PORTD : CLR_BIT(DDRD_register,u8PinIdCopy);break;
    10ac:	a1 e3       	ldi	r26, 0x31	; 49
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e1 e3       	ldi	r30, 0x31	; 49
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_SetPinDirection+0x1f4>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_SetPinDirection+0x1f0>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
	}else
	{
		/*do nothing error!*/
	}

}
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <DIO_SetPinValue>:

void DIO_SetPinValue (u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinValCopy)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	27 97       	sbiw	r28, 0x07	; 7
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	6a 83       	std	Y+2, r22	; 0x02
    10fe:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= PORTD) &&(u8PinIdCopy <= PIN7))
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	08 f0       	brcs	.+2      	; 0x1108 <DIO_SetPinValue+0x22>
    1106:	ee c0       	rjmp	.+476    	; 0x12e4 <DIO_SetPinValue+0x1fe>
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	08 f0       	brcs	.+2      	; 0x1110 <DIO_SetPinValue+0x2a>
    110e:	ea c0       	rjmp	.+468    	; 0x12e4 <DIO_SetPinValue+0x1fe>
		{
			if (u8PinValCopy == HIGH)
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	09 f0       	breq	.+2      	; 0x1118 <DIO_SetPinValue+0x32>
    1116:	6f c0       	rjmp	.+222    	; 0x11f6 <DIO_SetPinValue+0x110>
			{
				/*check on the reguired PORT number*/
				switch(u8PortIdCopy)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3f 83       	std	Y+7, r19	; 0x07
    1120:	2e 83       	std	Y+6, r18	; 0x06
    1122:	8e 81       	ldd	r24, Y+6	; 0x06
    1124:	9f 81       	ldd	r25, Y+7	; 0x07
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	49 f1       	breq	.+82     	; 0x117e <DIO_SetPinValue+0x98>
    112c:	2e 81       	ldd	r18, Y+6	; 0x06
    112e:	3f 81       	ldd	r19, Y+7	; 0x07
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <DIO_SetPinValue+0x5a>
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	61 f0       	breq	.+24     	; 0x1156 <DIO_SetPinValue+0x70>
    113e:	d2 c0       	rjmp	.+420    	; 0x12e4 <DIO_SetPinValue+0x1fe>
    1140:	2e 81       	ldd	r18, Y+6	; 0x06
    1142:	3f 81       	ldd	r19, Y+7	; 0x07
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	71 f1       	breq	.+92     	; 0x11a6 <DIO_SetPinValue+0xc0>
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	e9 f1       	breq	.+122    	; 0x11ce <DIO_SetPinValue+0xe8>
    1154:	c7 c0       	rjmp	.+398    	; 0x12e4 <DIO_SetPinValue+0x1fe>
				{

				case PORTA : SET_BIT(PORTA_register,u8PinIdCopy);break;
    1156:	ab e3       	ldi	r26, 0x3B	; 59
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_SetPinValue+0x8e>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_SetPinValue+0x8a>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	b3 c0       	rjmp	.+358    	; 0x12e4 <DIO_SetPinValue+0x1fe>
				case PORTB : SET_BIT(PORTB_register,u8PinIdCopy);break;
    117e:	a8 e3       	ldi	r26, 0x38	; 56
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_SetPinValue+0xb6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_SetPinValue+0xb2>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	9f c0       	rjmp	.+318    	; 0x12e4 <DIO_SetPinValue+0x1fe>
				case PORTC : SET_BIT(PORTC_register,u8PinIdCopy);break;
    11a6:	a5 e3       	ldi	r26, 0x35	; 53
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e3       	ldi	r30, 0x35	; 53
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_SetPinValue+0xde>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_SetPinValue+0xda>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	8b c0       	rjmp	.+278    	; 0x12e4 <DIO_SetPinValue+0x1fe>
				case PORTD : SET_BIT(PORTD_register,u8PinIdCopy);break;
    11ce:	a2 e3       	ldi	r26, 0x32	; 50
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_SetPinValue+0x106>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_SetPinValue+0x102>
    11f0:	84 2b       	or	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	77 c0       	rjmp	.+238    	; 0x12e4 <DIO_SetPinValue+0x1fe>

				}
			}
			else if (u8PinValCopy ==LOW)
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 23       	and	r24, r24
    11fa:	09 f0       	breq	.+2      	; 0x11fe <DIO_SetPinValue+0x118>
    11fc:	73 c0       	rjmp	.+230    	; 0x12e4 <DIO_SetPinValue+0x1fe>
			{
				switch(u8PortIdCopy)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	59 f1       	breq	.+86     	; 0x1268 <DIO_SetPinValue+0x182>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_SetPinValue+0x140>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f0       	breq	.+26     	; 0x123e <DIO_SetPinValue+0x158>
    1224:	5f c0       	rjmp	.+190    	; 0x12e4 <DIO_SetPinValue+0x1fe>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	89 f1       	breq	.+98     	; 0x1292 <DIO_SetPinValue+0x1ac>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_SetPinValue+0x156>
    123a:	40 c0       	rjmp	.+128    	; 0x12bc <DIO_SetPinValue+0x1d6>
    123c:	53 c0       	rjmp	.+166    	; 0x12e4 <DIO_SetPinValue+0x1fe>
							{

							case PORTA : CLR_BIT(PORTA_register,u8PinIdCopy);break;
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_SetPinValue+0x176>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_SetPinValue+0x172>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	3e c0       	rjmp	.+124    	; 0x12e4 <DIO_SetPinValue+0x1fe>
							case PORTB : CLR_BIT(PORTB_register,u8PinIdCopy);break;
    1268:	a8 e3       	ldi	r26, 0x38	; 56
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e8 e3       	ldi	r30, 0x38	; 56
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_SetPinValue+0x1a0>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_SetPinValue+0x19c>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	29 c0       	rjmp	.+82     	; 0x12e4 <DIO_SetPinValue+0x1fe>
							case PORTC : CLR_BIT(PORTC_register,u8PinIdCopy);break;
    1292:	a5 e3       	ldi	r26, 0x35	; 53
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_SetPinValue+0x1ca>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_SetPinValue+0x1c6>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	14 c0       	rjmp	.+40     	; 0x12e4 <DIO_SetPinValue+0x1fe>
							case PORTD : CLR_BIT(PORTD_register,u8PinIdCopy);break;
    12bc:	a2 e3       	ldi	r26, 0x32	; 50
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e2 e3       	ldi	r30, 0x32	; 50
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_SetPinValue+0x1f4>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_SetPinValue+0x1f0>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
			}
		}else
		{
			/*do nothing error in the pin id or port id*/
		}
}
    12e4:	27 96       	adiw	r28, 0x07	; 7
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <DIO_GetPinValue>:
u8 DIO_GetPinValue (u8 u8PortIdCopy,u8 u8PinIdCopy)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <DIO_GetPinValue+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_GetPinValue+0x8>
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ResultLocal;
	if((u8PortIdCopy <= PORTD) &&(u8PinIdCopy <= PIN7))
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	08 f0       	brcs	.+2      	; 0x1310 <DIO_GetPinValue+0x1a>
    130e:	6c c0       	rjmp	.+216    	; 0x13e8 <DIO_GetPinValue+0xf2>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	08 f0       	brcs	.+2      	; 0x1318 <DIO_GetPinValue+0x22>
    1316:	68 c0       	rjmp	.+208    	; 0x13e8 <DIO_GetPinValue+0xf2>
	{
		switch(u8PortIdCopy)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3d 83       	std	Y+5, r19	; 0x05
    1320:	2c 83       	std	Y+4, r18	; 0x04
    1322:	4c 81       	ldd	r20, Y+4	; 0x04
    1324:	5d 81       	ldd	r21, Y+5	; 0x05
    1326:	41 30       	cpi	r20, 0x01	; 1
    1328:	51 05       	cpc	r21, r1
    132a:	41 f1       	breq	.+80     	; 0x137c <DIO_GetPinValue+0x86>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	91 05       	cpc	r25, r1
    1334:	34 f4       	brge	.+12     	; 0x1342 <DIO_GetPinValue+0x4c>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	21 15       	cp	r18, r1
    133c:	31 05       	cpc	r19, r1
    133e:	61 f0       	breq	.+24     	; 0x1358 <DIO_GetPinValue+0x62>
    1340:	55 c0       	rjmp	.+170    	; 0x13ec <DIO_GetPinValue+0xf6>
    1342:	4c 81       	ldd	r20, Y+4	; 0x04
    1344:	5d 81       	ldd	r21, Y+5	; 0x05
    1346:	42 30       	cpi	r20, 0x02	; 2
    1348:	51 05       	cpc	r21, r1
    134a:	51 f1       	breq	.+84     	; 0x13a0 <DIO_GetPinValue+0xaa>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	b9 f1       	breq	.+110    	; 0x13c4 <DIO_GetPinValue+0xce>
    1356:	4a c0       	rjmp	.+148    	; 0x13ec <DIO_GetPinValue+0xf6>
	    {
		            case PORTA :u8ResultLocal= GET_BIT(PORTA_register,u8PinIdCopy);break;
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_GetPinValue+0x7a>
    136c:	55 95       	asr	r21
    136e:	47 95       	ror	r20
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_GetPinValue+0x76>
    1374:	ca 01       	movw	r24, r20
    1376:	81 70       	andi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	38 c0       	rjmp	.+112    	; 0x13ec <DIO_GetPinValue+0xf6>
					case PORTB :u8ResultLocal= GET_BIT(PORTB_register,u8PinIdCopy);break;
    137c:	e8 e3       	ldi	r30, 0x38	; 56
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_GetPinValue+0x9e>
    1390:	55 95       	asr	r21
    1392:	47 95       	ror	r20
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_GetPinValue+0x9a>
    1398:	ca 01       	movw	r24, r20
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	26 c0       	rjmp	.+76     	; 0x13ec <DIO_GetPinValue+0xf6>
					case PORTC :u8ResultLocal= GET_BIT(PORTC_register,u8PinIdCopy);break;
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_GetPinValue+0xc2>
    13b4:	55 95       	asr	r21
    13b6:	47 95       	ror	r20
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_GetPinValue+0xbe>
    13bc:	ca 01       	movw	r24, r20
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <DIO_GetPinValue+0xf6>
					case PORTD :u8ResultLocal= GET_BIT(PORTD_register,u8PinIdCopy);break;
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_GetPinValue+0xe6>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_GetPinValue+0xe2>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_GetPinValue+0xf6>
	    }
	}
	else
	{
		u8ResultLocal=0xFF;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8ResultLocal;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <DIO_SetPORTDirection>:

void DIO_SetPORTDirection (u8 u8PortIdCopy,u8 u8PinDirCopy)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <DIO_SetPORTDirection+0x6>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    140e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<8;i++)
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <DIO_SetPORTDirection+0x26>
	{
		DIO_SetPinDirection ( u8PortIdCopy,i,u8PinDirCopy);
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	69 81       	ldd	r22, Y+1	; 0x01
    1418:	4b 81       	ldd	r20, Y+3	; 0x03
    141a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
}

void DIO_SetPORTDirection (u8 u8PortIdCopy,u8 u8PinDirCopy)
{
	u8 i=0;
	for(i=0;i<8;i++)
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	a8 f3       	brcs	.-22     	; 0x1414 <DIO_SetPORTDirection+0x16>
	{
		DIO_SetPinDirection ( u8PortIdCopy,i,u8PinDirCopy);
	}

}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_SetPort_Value>:
void  DIO_SetPort_Value (u8 u8PortIdCopy,u8 u8PinValCopy)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_SetPort_Value+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_SetPort_Value+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02

		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	d1 f0       	breq	.+52     	; 0x148e <DIO_SetPort_Value+0x58>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	2c f4       	brge	.+10     	; 0x146e <DIO_SetPort_Value+0x38>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	61 f0       	breq	.+24     	; 0x1484 <DIO_SetPort_Value+0x4e>
    146c:	1e c0       	rjmp	.+60     	; 0x14aa <DIO_SetPort_Value+0x74>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	81 f0       	breq	.+32     	; 0x1498 <DIO_SetPort_Value+0x62>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	81 f0       	breq	.+32     	; 0x14a2 <DIO_SetPort_Value+0x6c>
    1482:	13 c0       	rjmp	.+38     	; 0x14aa <DIO_SetPort_Value+0x74>
		{
			case     PORTA:PORTA_register =  u8PinValCopy; break;
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <DIO_SetPort_Value+0x74>
			case     PORTB: PORTB_register =  u8PinValCopy; break;
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <DIO_SetPort_Value+0x74>
			case     PORTC: PORTC_register = u8PinValCopy; break;
    1498:	e5 e3       	ldi	r30, 0x35	; 53
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	80 83       	st	Z, r24
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <DIO_SetPort_Value+0x74>
			case     PORTD: PORTD_register =  u8PinValCopy; break;
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	80 83       	st	Z, r24
			default: /* Wrong Port ID */        break;
		}
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_set_Fhalf_Port_dir>:
void DIO_set_Fhalf_Port_dir(u8 u8PortIdCopy,u8 u8PinDirCopy)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_set_Fhalf_Port_dir+0x6>
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    14c8:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<4;i++)
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <DIO_set_Fhalf_Port_dir+0x26>
		{
			DIO_SetPinDirection ( u8PortIdCopy,i,u8PinDirCopy);
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	69 81       	ldd	r22, Y+1	; 0x01
    14d2:	4b 81       	ldd	r20, Y+3	; 0x03
    14d4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
		}
}
void DIO_set_Fhalf_Port_dir(u8 u8PortIdCopy,u8 u8PinDirCopy)
{
	u8 i=0;
		for(i=0;i<4;i++)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	a8 f3       	brcs	.-22     	; 0x14ce <DIO_set_Fhalf_Port_dir+0x16>
		{
			DIO_SetPinDirection ( u8PortIdCopy,i,u8PinDirCopy);
		}

}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_set_Fhalf_Port_Val>:

void DIO_set_Fhalf_Port_Val(u8 u8PortIdCopy,u8 u8PinValCopy)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_set_Fhalf_Port_Val+0x6>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    1500:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<4;i++)
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <DIO_set_Fhalf_Port_Val+0x26>
		{
			DIO_SetPinValue ( u8PortIdCopy,i,u8PinValCopy);
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	69 81       	ldd	r22, Y+1	; 0x01
    150a:	4b 81       	ldd	r20, Y+3	; 0x03
    150c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
}

void DIO_set_Fhalf_Port_Val(u8 u8PortIdCopy,u8 u8PinValCopy)
{
	u8 i=0;
		for(i=0;i<4;i++)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	a8 f3       	brcs	.-22     	; 0x1506 <DIO_set_Fhalf_Port_Val+0x16>
		{
			DIO_SetPinValue ( u8PortIdCopy,i,u8PinValCopy);
		}
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <u8ADC_Channel_Reading>:
 */
#include "ADC_pri.h"
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
u32 u8ADC_Channel_Reading(u8 u8ChannelReadCopy)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
ADMUX&=0b11100000;
    1534:	a7 e2       	ldi	r26, 0x27	; 39
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e2       	ldi	r30, 0x27	; 39
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 7e       	andi	r24, 0xE0	; 224
    1540:	8c 93       	st	X, r24
ADMUX|=u8ChannelReadCopy;
    1542:	a7 e2       	ldi	r26, 0x27	; 39
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e2       	ldi	r30, 0x27	; 39
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	90 81       	ld	r25, Z
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	89 2b       	or	r24, r25
    1550:	8c 93       	st	X, r24

SET_BIT(ADCSRA,6);   /*start conversion*/
    1552:	a6 e2       	ldi	r26, 0x26	; 38
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e6 e2       	ldi	r30, 0x26	; 38
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24
while(GET_BIT(ADCSRA,4)==0);
    1560:	e6 e2       	ldi	r30, 0x26	; 38
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	82 95       	swap	r24
    1568:	8f 70       	andi	r24, 0x0F	; 15
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	81 70       	andi	r24, 0x01	; 1
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	a9 f3       	breq	.-22     	; 0x1560 <u8ADC_Channel_Reading+0x38>
SET_BIT(ADCSRA,4); /*clear the flag==set the bit 1*/
    1576:	a6 e2       	ldi	r26, 0x26	; 38
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e6 e2       	ldi	r30, 0x26	; 38
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 61       	ori	r24, 0x10	; 16
    1582:	8c 93       	st	X, r24

return ADC_DATA;
    1584:	e4 e2       	ldi	r30, 0x24	; 36
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	cc 01       	movw	r24, r24
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
}
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <ADC_init>:

void ADC_init(void)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	/*8 bit mode , aVcc ref voltage polling (not interrupt)*/
	    CLR_BIT(ADMUX,7);
    15a6:	a7 e2       	ldi	r26, 0x27	; 39
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e7 e2       	ldi	r30, 0x27	; 39
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8f 77       	andi	r24, 0x7F	; 127
    15b2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    15b4:	a7 e2       	ldi	r26, 0x27	; 39
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e7 e2       	ldi	r30, 0x27	; 39
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 64       	ori	r24, 0x40	; 64
    15c0:	8c 93       	st	X, r24
	/*activate left adjust mode*/
		CLR_BIT(ADMUX,5);
    15c2:	a7 e2       	ldi	r26, 0x27	; 39
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e2       	ldi	r30, 0x27	; 39
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8f 7d       	andi	r24, 0xDF	; 223
    15ce:	8c 93       	st	X, r24
    /*prescaller division by 128*/
		SET_BIT(ADCSRA,0);
    15d0:	a6 e2       	ldi	r26, 0x26	; 38
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e6 e2       	ldi	r30, 0x26	; 38
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	81 60       	ori	r24, 0x01	; 1
    15dc:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
    15de:	a6 e2       	ldi	r26, 0x26	; 38
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e6 e2       	ldi	r30, 0x26	; 38
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,2);
    15ec:	a6 e2       	ldi	r26, 0x26	; 38
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e6 e2       	ldi	r30, 0x26	; 38
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	84 60       	ori	r24, 0x04	; 4
    15f8:	8c 93       	st	X, r24

    /*ADC enable*/
		SET_BIT(ADCSRA,7);
    15fa:	a6 e2       	ldi	r26, 0x26	; 38
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e6 e2       	ldi	r30, 0x26	; 38
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	8c 93       	st	X, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <LM35_vid_init>:
 * 2- transverse it to temp
 *      10 mv=1 C
 * 3-return with it
 */
void LM35_vid_init(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    1616:	0e 94 cf 0a 	call	0x159e	; 0x159e <ADC_init>
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LM35_u16_value>:
u32 LM35_u16_value(u8 u8channelNumCopy )
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <LM35_u16_value+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <LM35_u16_value+0x8>
    1628:	0f 92       	push	r0
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	8d 83       	std	Y+5, r24	; 0x05
	u32 temp;
	temp=u8ADC_Channel_Reading(u8channelNumCopy);
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 94 0a 	call	0x1528	; 0x1528 <u8ADC_Channel_Reading>
    163a:	aa 27       	eor	r26, r26
    163c:	97 fd       	sbrc	r25, 7
    163e:	a0 95       	com	r26
    1640:	ba 2f       	mov	r27, r26
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	ab 83       	std	Y+3, r26	; 0x03
    1648:	bc 83       	std	Y+4, r27	; 0x04
	temp= (temp*150*5)/(1023*1.5);
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	ab 81       	ldd	r26, Y+3	; 0x03
    1650:	bc 81       	ldd	r27, Y+4	; 0x04
    1652:	2e ee       	ldi	r18, 0xEE	; 238
    1654:	32 e0       	ldi	r19, 0x02	; 2
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__mulsi3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 ed       	ldi	r19, 0xD0	; 208
    167a:	4f eb       	ldi	r20, 0xBF	; 191
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	ab 83       	std	Y+3, r26	; 0x03
    1698:	bc 83       	std	Y+4, r27	; 0x04
			return temp;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	ab 81       	ldd	r26, Y+3	; 0x03
    16a0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <SERVO_init_vid>:
 */
#include "../../MCAL/DIO/DIO_int.h"


void SERVO_init_vid(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <SERVO_init_vid+0x6>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6a 83       	std	Y+2, r22	; 0x02
DIO_SetPinDirection(u8PortIdCopy,u8PinIdCopy,OUTPUT);
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	6a 81       	ldd	r22, Y+2	; 0x02
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <LCD_vidInit>:
#include "lcd_int.h"
#include <avr/delay.h>
#include <stdlib.h>

void LCD_vidInit(void)
{
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	c4 55       	subi	r28, 0x54	; 84
    16e6:	d0 40       	sbci	r29, 0x00	; 0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
  DIO_SetPORTDirection(LCD_DATA_PINS,OUTPUT);
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_SetPORTDirection>
  DIO_SetPinDirection(LCD_CTRL_PINS,LCD_RS_PIN,OUTPUT);
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
  DIO_SetPinDirection(LCD_CTRL_PINS,LCD_RW_PIN,OUTPUT);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
  DIO_SetPinDirection(LCD_CTRL_PINS,LCD_EN_PIN,OUTPUT);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
    1718:	fe 01       	movw	r30, r28
    171a:	ef 5a       	subi	r30, 0xAF	; 175
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 ef       	ldi	r26, 0xF0	; 240
    1724:	b1 e4       	ldi	r27, 0x41	; 65
    1726:	80 83       	st	Z, r24
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	a2 83       	std	Z+2, r26	; 0x02
    172c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	8e 01       	movw	r16, r28
    1730:	03 5b       	subi	r16, 0xB3	; 179
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	fe 01       	movw	r30, r28
    1736:	ef 5a       	subi	r30, 0xAF	; 175
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a ef       	ldi	r20, 0xFA	; 250
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	f8 01       	movw	r30, r16
    1754:	80 83       	st	Z, r24
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	a2 83       	std	Z+2, r26	; 0x02
    175a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175c:	fe 01       	movw	r30, r28
    175e:	e3 5b       	subi	r30, 0xB3	; 179
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	44 f4       	brge	.+16     	; 0x178a <LCD_vidInit+0xb2>
		__ticks = 1;
    177a:	fe 01       	movw	r30, r28
    177c:	e5 5b       	subi	r30, 0xB5	; 181
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	64 c0       	rjmp	.+200    	; 0x1852 <LCD_vidInit+0x17a>
	else if (__tmp > 65535)
    178a:	fe 01       	movw	r30, r28
    178c:	e3 5b       	subi	r30, 0xB3	; 179
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	0c f0       	brlt	.+2      	; 0x17aa <LCD_vidInit+0xd2>
    17a8:	43 c0       	rjmp	.+134    	; 0x1830 <LCD_vidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	fe 01       	movw	r30, r28
    17ac:	ef 5a       	subi	r30, 0xAF	; 175
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	8e 01       	movw	r16, r28
    17ca:	05 5b       	subi	r16, 0xB5	; 181
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	f8 01       	movw	r30, r16
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    17e0:	1f c0       	rjmp	.+62     	; 0x1820 <LCD_vidInit+0x148>
    17e2:	fe 01       	movw	r30, r28
    17e4:	e7 5b       	subi	r30, 0xB7	; 183
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	88 ec       	ldi	r24, 0xC8	; 200
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f0:	fe 01       	movw	r30, r28
    17f2:	e7 5b       	subi	r30, 0xB7	; 183
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_vidInit+0x122>
    17fe:	fe 01       	movw	r30, r28
    1800:	e7 5b       	subi	r30, 0xB7	; 183
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	de 01       	movw	r26, r28
    180a:	a5 5b       	subi	r26, 0xB5	; 181
    180c:	bf 4f       	sbci	r27, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	e5 5b       	subi	r30, 0xB5	; 181
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	9c 93       	st	X, r25
    181e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	fe 01       	movw	r30, r28
    1822:	e5 5b       	subi	r30, 0xB5	; 181
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	d1 f6       	brne	.-76     	; 0x17e2 <LCD_vidInit+0x10a>
    182e:	27 c0       	rjmp	.+78     	; 0x187e <LCD_vidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	8e 01       	movw	r16, r28
    1832:	05 5b       	subi	r16, 0xB5	; 181
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	fe 01       	movw	r30, r28
    1838:	e3 5b       	subi	r30, 0xB3	; 179
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	f8 01       	movw	r30, r16
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
    1852:	de 01       	movw	r26, r28
    1854:	a9 5b       	subi	r26, 0xB9	; 185
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e5 5b       	subi	r30, 0xB5	; 181
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	8d 93       	st	X+, r24
    1864:	9c 93       	st	X, r25
    1866:	fe 01       	movw	r30, r28
    1868:	e9 5b       	subi	r30, 0xB9	; 185
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_vidInit+0x198>
    1874:	fe 01       	movw	r30, r28
    1876:	e9 5b       	subi	r30, 0xB9	; 185
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
  _delay_ms(30);

  LCD_vidSendCommand(LCD__HOME);
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
    1884:	fe 01       	movw	r30, r28
    1886:	ed 5b       	subi	r30, 0xBD	; 189
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e7       	ldi	r26, 0x70	; 112
    1890:	b1 e4       	ldi	r27, 0x41	; 65
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	8e 01       	movw	r16, r28
    189c:	01 5c       	subi	r16, 0xC1	; 193
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	ed 5b       	subi	r30, 0xBD	; 189
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	ff 96       	adiw	r30, 0x3f	; 63
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <LCD_vidInit+0x216>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9e af       	std	Y+62, r25	; 0x3e
    18ea:	8d af       	std	Y+61, r24	; 0x3d
    18ec:	46 c0       	rjmp	.+140    	; 0x197a <LCD_vidInit+0x2a2>
	else if (__tmp > 65535)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ff 96       	adiw	r30, 0x3f	; 63
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	64 f5       	brge	.+88     	; 0x1962 <LCD_vidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	fe 01       	movw	r30, r28
    190c:	ed 5b       	subi	r30, 0xBD	; 189
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e af       	std	Y+62, r25	; 0x3e
    1936:	8d af       	std	Y+61, r24	; 0x3d
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <LCD_vidInit+0x280>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9c af       	std	Y+60, r25	; 0x3c
    1940:	8b af       	std	Y+59, r24	; 0x3b
    1942:	8b ad       	ldd	r24, Y+59	; 0x3b
    1944:	9c ad       	ldd	r25, Y+60	; 0x3c
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_vidInit+0x26e>
    194a:	9c af       	std	Y+60, r25	; 0x3c
    194c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1950:	9e ad       	ldd	r25, Y+62	; 0x3e
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9e af       	std	Y+62, r25	; 0x3e
    1956:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8d ad       	ldd	r24, Y+61	; 0x3d
    195a:	9e ad       	ldd	r25, Y+62	; 0x3e
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <LCD_vidInit+0x262>
    1960:	16 c0       	rjmp	.+44     	; 0x198e <LCD_vidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	fe 01       	movw	r30, r28
    1964:	ff 96       	adiw	r30, 0x3f	; 63
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	8d ad       	ldd	r24, Y+61	; 0x3d
    197c:	9e ad       	ldd	r25, Y+62	; 0x3e
    197e:	9a af       	std	Y+58, r25	; 0x3a
    1980:	89 af       	std	Y+57, r24	; 0x39
    1982:	89 ad       	ldd	r24, Y+57	; 0x39
    1984:	9a ad       	ldd	r25, Y+58	; 0x3a
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_vidInit+0x2ae>
    198a:	9a af       	std	Y+58, r25	; 0x3a
    198c:	89 af       	std	Y+57, r24	; 0x39
  _delay_ms(15);

  LCD_vidSendCommand(LCD_FUNCTION_SET_8BIT);
    198e:	88 e3       	ldi	r24, 0x38	; 56
    1990:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e8       	ldi	r26, 0x80	; 128
    199a:	bf e3       	ldi	r27, 0x3F	; 63
    199c:	8d ab       	std	Y+53, r24	; 0x35
    199e:	9e ab       	std	Y+54, r25	; 0x36
    19a0:	af ab       	std	Y+55, r26	; 0x37
    19a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6d a9       	ldd	r22, Y+53	; 0x35
    19a6:	7e a9       	ldd	r23, Y+54	; 0x36
    19a8:	8f a9       	ldd	r24, Y+55	; 0x37
    19aa:	98 ad       	ldd	r25, Y+56	; 0x38
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	89 ab       	std	Y+49, r24	; 0x31
    19be:	9a ab       	std	Y+50, r25	; 0x32
    19c0:	ab ab       	std	Y+51, r26	; 0x33
    19c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19c4:	69 a9       	ldd	r22, Y+49	; 0x31
    19c6:	7a a9       	ldd	r23, Y+50	; 0x32
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	9c a9       	ldd	r25, Y+52	; 0x34
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_vidInit+0x30e>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	98 ab       	std	Y+48, r25	; 0x30
    19e2:	8f a7       	std	Y+47, r24	; 0x2f
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_vidInit+0x38c>
	else if (__tmp > 65535)
    19e6:	69 a9       	ldd	r22, Y+49	; 0x31
    19e8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ea:	8b a9       	ldd	r24, Y+51	; 0x33
    19ec:	9c a9       	ldd	r25, Y+52	; 0x34
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_vidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1a00:	7e a9       	ldd	r23, Y+54	; 0x36
    1a02:	8f a9       	ldd	r24, Y+55	; 0x37
    1a04:	98 ad       	ldd	r25, Y+56	; 0x38
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	98 ab       	std	Y+48, r25	; 0x30
    1a24:	8f a7       	std	Y+47, r24	; 0x2f
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_vidInit+0x36e>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9e a7       	std	Y+46, r25	; 0x2e
    1a2e:	8d a7       	std	Y+45, r24	; 0x2d
    1a30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_vidInit+0x35c>
    1a38:	9e a7       	std	Y+46, r25	; 0x2e
    1a3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	98 ab       	std	Y+48, r25	; 0x30
    1a44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_vidInit+0x350>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_vidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	69 a9       	ldd	r22, Y+49	; 0x31
    1a52:	7a a9       	ldd	r23, Y+50	; 0x32
    1a54:	8b a9       	ldd	r24, Y+51	; 0x33
    1a56:	9c a9       	ldd	r25, Y+52	; 0x34
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	98 ab       	std	Y+48, r25	; 0x30
    1a62:	8f a7       	std	Y+47, r24	; 0x2f
    1a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a66:	98 a9       	ldd	r25, Y+48	; 0x30
    1a68:	9c a7       	std	Y+44, r25	; 0x2c
    1a6a:	8b a7       	std	Y+43, r24	; 0x2b
    1a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_vidInit+0x398>
    1a74:	9c a7       	std	Y+44, r25	; 0x2c
    1a76:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(1);
  LCD_vidSendCommand(LCD_DISPLAY_ON);
    1a78:	8c e0       	ldi	r24, 0x0C	; 12
    1a7a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e8       	ldi	r26, 0x80	; 128
    1a84:	bf e3       	ldi	r27, 0x3F	; 63
    1a86:	8f a3       	std	Y+39, r24	; 0x27
    1a88:	98 a7       	std	Y+40, r25	; 0x28
    1a8a:	a9 a7       	std	Y+41, r26	; 0x29
    1a8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a90:	78 a5       	ldd	r23, Y+40	; 0x28
    1a92:	89 a5       	ldd	r24, Y+41	; 0x29
    1a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8b a3       	std	Y+35, r24	; 0x23
    1aa8:	9c a3       	std	Y+36, r25	; 0x24
    1aaa:	ad a3       	std	Y+37, r26	; 0x25
    1aac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <LCD_vidInit+0x3f8>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9a a3       	std	Y+34, r25	; 0x22
    1acc:	89 a3       	std	Y+33, r24	; 0x21
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <LCD_vidInit+0x476>
	else if (__tmp > 65535)
    1ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <LCD_vidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aea:	78 a5       	ldd	r23, Y+40	; 0x28
    1aec:	89 a5       	ldd	r24, Y+41	; 0x29
    1aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9a a3       	std	Y+34, r25	; 0x22
    1b0e:	89 a3       	std	Y+33, r24	; 0x21
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <LCD_vidInit+0x458>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	98 a3       	std	Y+32, r25	; 0x20
    1b18:	8f 8f       	std	Y+31, r24	; 0x1f
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_vidInit+0x446>
    1b22:	98 a3       	std	Y+32, r25	; 0x20
    1b24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	89 a1       	ldd	r24, Y+33	; 0x21
    1b28:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	89 a1       	ldd	r24, Y+33	; 0x21
    1b32:	9a a1       	ldd	r25, Y+34	; 0x22
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <LCD_vidInit+0x43a>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <LCD_vidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b40:	9e a1       	ldd	r25, Y+38	; 0x26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9a a3       	std	Y+34, r25	; 0x22
    1b4c:	89 a3       	std	Y+33, r24	; 0x21
    1b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b50:	9a a1       	ldd	r25, Y+34	; 0x22
    1b52:	9e 8f       	std	Y+30, r25	; 0x1e
    1b54:	8d 8f       	std	Y+29, r24	; 0x1d
    1b56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_vidInit+0x482>
    1b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b60:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);
  LCD_vidSendCommand(LCD_CLEAR);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e7       	ldi	r26, 0x70	; 112
    1b6e:	b1 e4       	ldi	r27, 0x41	; 65
    1b70:	89 8f       	std	Y+25, r24	; 0x19
    1b72:	9a 8f       	std	Y+26, r25	; 0x1a
    1b74:	ab 8f       	std	Y+27, r26	; 0x1b
    1b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8d 8b       	std	Y+21, r24	; 0x15
    1b92:	9e 8b       	std	Y+22, r25	; 0x16
    1b94:	af 8b       	std	Y+23, r26	; 0x17
    1b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b98:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_vidInit+0x4e2>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_vidInit+0x560>
	else if (__tmp > 65535)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_vidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_vidInit+0x542>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a 8b       	std	Y+18, r25	; 0x12
    1c02:	89 8b       	std	Y+17, r24	; 0x11
    1c04:	89 89       	ldd	r24, Y+17	; 0x11
    1c06:	9a 89       	ldd	r25, Y+18	; 0x12
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_vidInit+0x530>
    1c0c:	9a 8b       	std	Y+18, r25	; 0x12
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_vidInit+0x524>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_vidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	6d 89       	ldd	r22, Y+21	; 0x15
    1c26:	7e 89       	ldd	r23, Y+22	; 0x16
    1c28:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_vidInit+0x56c>
    1c48:	98 8b       	std	Y+16, r25	; 0x10
    1c4a:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(15);
  LCD_vidSendCommand(LCD_ENTRY_MODE);
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e4       	ldi	r27, 0x40	; 64
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_vidInit+0x5cc>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_vidInit+0x64a>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_vidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_vidInit+0x62c>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_vidInit+0x61a>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_vidInit+0x60e>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_vidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_vidInit+0x656>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);

}
    1d36:	cc 5a       	subi	r28, 0xAC	; 172
    1d38:	df 4f       	sbci	r29, 0xFF	; 255
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	08 95       	ret

00001d4e <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 u8CmdCopy)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	6d 97       	sbiw	r28, 0x1d	; 29
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	8d 8f       	std	Y+29, r24	; 0x1d
	/*1- Set RS = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_RS_PIN,LOW);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

   /*2- Set RW = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_RW_PIN,LOW);
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

  /*3- Set EN = HIGH*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,HIGH);
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

  /*4- Set command on bus*/
DIO_SetPort_Value(LCD_DATA_PINS,u8CmdCopy);
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d86:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_SetPort_Value>

  /*5- Set EN = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,LOW);
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	62 e0       	ldi	r22, 0x02	; 2
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 ea       	ldi	r26, 0xA0	; 160
    1d9a:	b0 e4       	ldi	r27, 0x40	; 64
    1d9c:	89 8f       	std	Y+25, r24	; 0x19
    1d9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1da0:	ab 8f       	std	Y+27, r26	; 0x1b
    1da2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	69 8d       	ldd	r22, Y+25	; 0x19
    1da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4a ef       	ldi	r20, 0xFA	; 250
    1db2:	54 e4       	ldi	r21, 0x44	; 68
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8d 8b       	std	Y+21, r24	; 0x15
    1dbe:	9e 8b       	std	Y+22, r25	; 0x16
    1dc0:	af 8b       	std	Y+23, r26	; 0x17
    1dc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9c 8b       	std	Y+20, r25	; 0x14
    1de2:	8b 8b       	std	Y+19, r24	; 0x13
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    1de6:	6d 89       	ldd	r22, Y+21	; 0x15
    1de8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dea:	8f 89       	ldd	r24, Y+23	; 0x17
    1dec:	98 8d       	ldd	r25, Y+24	; 0x18
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	4c f5       	brge	.+82     	; 0x1e50 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <LCD_vidSendCommand+0xf8>
    1e28:	88 ec       	ldi	r24, 0xC8	; 200
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9a 8b       	std	Y+18, r25	; 0x12
    1e2e:	89 8b       	std	Y+17, r24	; 0x11
    1e30:	89 89       	ldd	r24, Y+17	; 0x11
    1e32:	9a 89       	ldd	r25, Y+18	; 0x12
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_vidSendCommand+0xe6>
    1e38:	9a 8b       	std	Y+18, r25	; 0x12
    1e3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <LCD_vidSendCommand+0xda>
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e50:	6d 89       	ldd	r22, Y+21	; 0x15
    1e52:	7e 89       	ldd	r23, Y+22	; 0x16
    1e54:	8f 89       	ldd	r24, Y+23	; 0x17
    1e56:	98 8d       	ldd	r25, Y+24	; 0x18
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9c 8b       	std	Y+20, r25	; 0x14
    1e62:	8b 8b       	std	Y+19, r24	; 0x13
    1e64:	8b 89       	ldd	r24, Y+19	; 0x13
    1e66:	9c 89       	ldd	r25, Y+20	; 0x14
    1e68:	98 8b       	std	Y+16, r25	; 0x10
    1e6a:	8f 87       	std	Y+15, r24	; 0x0f
    1e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6e:	98 89       	ldd	r25, Y+16	; 0x10
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_vidSendCommand+0x122>
    1e74:	98 8b       	std	Y+16, r25	; 0x10
    1e76:	8f 87       	std	Y+15, r24	; 0x0f

  /*6- wait 5 ms-sec*/
 _delay_ms(5);

 /*7-Set EN = HIGH*/
 DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,HIGH);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e2       	ldi	r26, 0x20	; 32
    1e88:	b1 e4       	ldi	r27, 0x41	; 65
    1e8a:	8b 87       	std	Y+11, r24	; 0x0b
    1e8c:	9c 87       	std	Y+12, r25	; 0x0c
    1e8e:	ad 87       	std	Y+13, r26	; 0x0d
    1e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ea0:	54 e4       	ldi	r21, 0x44	; 68
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8f 83       	std	Y+7, r24	; 0x07
    1eac:	98 87       	std	Y+8, r25	; 0x08
    1eae:	a9 87       	std	Y+9, r26	; 0x09
    1eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	3f c0       	rjmp	.+126    	; 0x1f52 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	4c f5       	brge	.+82     	; 0x1f3e <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e2       	ldi	r20, 0x20	; 32
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <LCD_vidSendCommand+0x1e6>
    1f16:	88 ec       	ldi	r24, 0xC8	; 200
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_vidSendCommand+0x1d4>
    1f26:	9c 83       	std	Y+4, r25	; 0x04
    1f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	69 f7       	brne	.-38     	; 0x1f16 <LCD_vidSendCommand+0x1c8>
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_vidSendCommand+0x210>
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01

 /*8- wait 10 ms-sec*/
 _delay_ms(10);


}
    1f66:	6d 96       	adiw	r28, 0x1d	; 29
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <LCD_vidWriteChar>:

void LCD_vidWriteChar (u8 u8DataCopy)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	6d 97       	sbiw	r28, 0x1d	; 29
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*1- Set RS = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_RS_PIN,HIGH);
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

   /*2- Set RW = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_RW_PIN,LOW);
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

  /*3- Set EN = HIGH*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,HIGH);
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

  /*4- Set command on bus*/
DIO_SetPort_Value(LCD_DATA_PINS,u8DataCopy);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fb0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_SetPort_Value>

  /*5- Set EN = LOW*/
DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,LOW);
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	62 e0       	ldi	r22, 0x02	; 2
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc4:	b0 e4       	ldi	r27, 0x40	; 64
    1fc6:	89 8f       	std	Y+25, r24	; 0x19
    1fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fca:	ab 8f       	std	Y+27, r26	; 0x1b
    1fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a ef       	ldi	r20, 0xFA	; 250
    1fdc:	54 e4       	ldi	r21, 0x44	; 68
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8d 8b       	std	Y+21, r24	; 0x15
    1fe8:	9e 8b       	std	Y+22, r25	; 0x16
    1fea:	af 8b       	std	Y+23, r26	; 0x17
    1fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_vidWriteChar+0x98>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9c 8b       	std	Y+20, r25	; 0x14
    200c:	8b 8b       	std	Y+19, r24	; 0x13
    200e:	3f c0       	rjmp	.+126    	; 0x208e <LCD_vidWriteChar+0x116>
	else if (__tmp > 65535)
    2010:	6d 89       	ldd	r22, Y+21	; 0x15
    2012:	7e 89       	ldd	r23, Y+22	; 0x16
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	98 8d       	ldd	r25, Y+24	; 0x18
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <LCD_vidWriteChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	69 8d       	ldd	r22, Y+25	; 0x19
    202a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9c 8b       	std	Y+20, r25	; 0x14
    204e:	8b 8b       	std	Y+19, r24	; 0x13
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_vidWriteChar+0xf8>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
    205a:	89 89       	ldd	r24, Y+17	; 0x11
    205c:	9a 89       	ldd	r25, Y+18	; 0x12
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_vidWriteChar+0xe6>
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	8b 89       	ldd	r24, Y+19	; 0x13
    2068:	9c 89       	ldd	r25, Y+20	; 0x14
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9c 8b       	std	Y+20, r25	; 0x14
    206e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	8b 89       	ldd	r24, Y+19	; 0x13
    2072:	9c 89       	ldd	r25, Y+20	; 0x14
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <LCD_vidWriteChar+0xda>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <LCD_vidWriteChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9c 8b       	std	Y+20, r25	; 0x14
    208c:	8b 8b       	std	Y+19, r24	; 0x13
    208e:	8b 89       	ldd	r24, Y+19	; 0x13
    2090:	9c 89       	ldd	r25, Y+20	; 0x14
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f
    2096:	8f 85       	ldd	r24, Y+15	; 0x0f
    2098:	98 89       	ldd	r25, Y+16	; 0x10
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_vidWriteChar+0x122>
    209e:	98 8b       	std	Y+16, r25	; 0x10
    20a0:	8f 87       	std	Y+15, r24	; 0x0f

  /*6- wait 5 ms-sec*/
 _delay_ms(5);

 /*7-Set EN = HIGH*/
 DIO_SetPinValue(LCD_CTRL_PINS,LCD_EN_PIN,HIGH);
    20a2:	83 e0       	ldi	r24, 0x03	; 3
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e2       	ldi	r26, 0x20	; 32
    20b2:	b1 e4       	ldi	r27, 0x41	; 65
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_vidWriteChar+0x186>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_vidWriteChar+0x204>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_vidWriteChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_vidWriteChar+0x1e6>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_vidWriteChar+0x1d4>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_vidWriteChar+0x1c8>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_vidWriteChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_vidWriteChar+0x210>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01

 /*8- wait 10 ms-sec*/
 _delay_ms(10);
}
    2190:	6d 96       	adiw	r28, 0x1d	; 29
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <LCD_vidWriteString>:

void LCD_vidWriteString (u8* pu8StringCopy)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	61 97       	sbiw	r28, 0x11	; 17
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	99 8b       	std	Y+17, r25	; 0x11
    21b8:	88 8b       	std	Y+16, r24	; 0x10
u8 i=0;
    21ba:	1f 86       	std	Y+15, r1	; 0x0f
    21bc:	80 c0       	rjmp	.+256    	; 0x22be <LCD_vidWriteString+0x11c>
while(pu8StringCopy[i]!='\0')
{
 LCD_vidWriteChar(pu8StringCopy[i]);
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	88 89       	ldd	r24, Y+16	; 0x10
    21c6:	99 89       	ldd	r25, Y+17	; 0x11
    21c8:	fc 01       	movw	r30, r24
    21ca:	e2 0f       	add	r30, r18
    21cc:	f3 1f       	adc	r31, r19
    21ce:	80 81       	ld	r24, Z
    21d0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_vidWriteChar>
 i++;
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	8f 87       	std	Y+15, r24	; 0x0f
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e4       	ldi	r27, 0x40	; 64
    21e2:	8b 87       	std	Y+11, r24	; 0x0b
    21e4:	9c 87       	std	Y+12, r25	; 0x0c
    21e6:	ad 87       	std	Y+13, r26	; 0x0d
    21e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	98 87       	std	Y+8, r25	; 0x08
    2206:	a9 87       	std	Y+9, r26	; 0x09
    2208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_vidWriteString+0x8a>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_vidWriteString+0x108>
	else if (__tmp > 65535)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_vidWriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_vidWriteString+0xea>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_vidWriteString+0xd8>
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_vidWriteString+0xcc>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <LCD_vidWriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_vidWriteString+0x114>
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidWriteString (u8* pu8StringCopy)
{
u8 i=0;
while(pu8StringCopy[i]!='\0')
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	88 89       	ldd	r24, Y+16	; 0x10
    22c6:	99 89       	ldd	r25, Y+17	; 0x11
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	80 81       	ld	r24, Z
    22d0:	88 23       	and	r24, r24
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <LCD_vidWriteString+0x134>
    22d4:	74 cf       	rjmp	.-280    	; 0x21be <LCD_vidWriteString+0x1c>
{
 LCD_vidWriteChar(pu8StringCopy[i]);
 i++;
 _delay_ms(2);
}
}
    22d6:	61 96       	adiw	r28, 0x11	; 17
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_VidGotoRawCol>:
void LCD_VidGotoRawCol (u8 u8RawCopy, u8 u8ColCopy)

{u8 Address;
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <LCD_VidGotoRawCol+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <LCD_VidGotoRawCol+0x8>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	6b 83       	std	Y+3, r22	; 0x03
  switch(u8RawCopy)
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	3d 83       	std	Y+5, r19	; 0x05
    2302:	2c 83       	std	Y+4, r18	; 0x04
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	9d 81       	ldd	r25, Y+5	; 0x05
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	91 05       	cpc	r25, r1
    230c:	c1 f0       	breq	.+48     	; 0x233e <LCD_VidGotoRawCol+0x56>
    230e:	2c 81       	ldd	r18, Y+4	; 0x04
    2310:	3d 81       	ldd	r19, Y+5	; 0x05
    2312:	22 30       	cpi	r18, 0x02	; 2
    2314:	31 05       	cpc	r19, r1
    2316:	2c f4       	brge	.+10     	; 0x2322 <LCD_VidGotoRawCol+0x3a>
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	61 f0       	breq	.+24     	; 0x2338 <LCD_VidGotoRawCol+0x50>
    2320:	19 c0       	rjmp	.+50     	; 0x2354 <LCD_VidGotoRawCol+0x6c>
    2322:	2c 81       	ldd	r18, Y+4	; 0x04
    2324:	3d 81       	ldd	r19, Y+5	; 0x05
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	69 f0       	breq	.+26     	; 0x2346 <LCD_VidGotoRawCol+0x5e>
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	9d 81       	ldd	r25, Y+5	; 0x05
    2330:	83 30       	cpi	r24, 0x03	; 3
    2332:	91 05       	cpc	r25, r1
    2334:	61 f0       	breq	.+24     	; 0x234e <LCD_VidGotoRawCol+0x66>
    2336:	0e c0       	rjmp	.+28     	; 0x2354 <LCD_VidGotoRawCol+0x6c>
  {
  case 0:     Address=u8ColCopy;               break;
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	0b c0       	rjmp	.+22     	; 0x2354 <LCD_VidGotoRawCol+0x6c>
  case 1:     Address=u8ColCopy+0x40;          break;
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	80 5c       	subi	r24, 0xC0	; 192
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	07 c0       	rjmp	.+14     	; 0x2354 <LCD_VidGotoRawCol+0x6c>
  /*if it 4*16*/
  case 2:     Address=u8ColCopy+0x10;          break;
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	80 5f       	subi	r24, 0xF0	; 240
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <LCD_VidGotoRawCol+0x6c>
  case 3:     Address=u8ColCopy+0x50;          break;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	80 5b       	subi	r24, 0xB0	; 176
    2352:	89 83       	std	Y+1, r24	; 0x01
  }
  LCD_vidSendCommand(Address|LCD_SET_CURSOR );
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	80 68       	ori	r24, 0x80	; 128
    2358:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_vid_num_to_str>:

void LCD_vid_num_to_str(u8 u8NumCopy)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <LCD_vid_num_to_str+0x6>
    2372:	00 d0       	rcall	.+0      	; 0x2374 <LCD_vid_num_to_str+0x8>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <LCD_vid_num_to_str+0xa>
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	8e 83       	std	Y+6, r24	; 0x06
	{
		u8 u8CharArr[3]={' '};
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	fe 01       	movw	r30, r28
    2380:	33 96       	adiw	r30, 0x03	; 3
    2382:	df 01       	movw	r26, r30
    2384:	98 2f       	mov	r25, r24
    2386:	1d 92       	st	X+, r1
    2388:	9a 95       	dec	r25
    238a:	e9 f7       	brne	.-6      	; 0x2386 <LCD_vid_num_to_str+0x1a>
    238c:	80 e2       	ldi	r24, 0x20	; 32
    238e:	8b 83       	std	Y+3, r24	; 0x03
		for(u8 j=0;j<3;j++)
    2390:	1a 82       	std	Y+2, r1	; 0x02
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <LCD_vid_num_to_str+0x42>
		{
			u8CharArr[j]=' ';
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	ce 01       	movw	r24, r28
    239c:	03 96       	adiw	r24, 0x03	; 3
    239e:	fc 01       	movw	r30, r24
    23a0:	e2 0f       	add	r30, r18
    23a2:	f3 1f       	adc	r31, r19
    23a4:	80 e2       	ldi	r24, 0x20	; 32
    23a6:	80 83       	st	Z, r24

void LCD_vid_num_to_str(u8 u8NumCopy)
{
	{
		u8 u8CharArr[3]={' '};
		for(u8 j=0;j<3;j++)
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	8f 5f       	subi	r24, 0xFF	; 255
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	83 30       	cpi	r24, 0x03	; 3
    23b2:	80 f3       	brcs	.-32     	; 0x2394 <LCD_vid_num_to_str+0x28>
		{
			u8CharArr[j]=' ';
		}
		LCD_VidGotoRawCol(0,5);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	65 e0       	ldi	r22, 0x05	; 5
    23b8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
	itoa(u8NumCopy,u8CharArr,10);
    23bc:	8e 81       	ldd	r24, Y+6	; 0x06
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9e 01       	movw	r18, r28
    23c4:	2d 5f       	subi	r18, 0xFD	; 253
    23c6:	3f 4f       	sbci	r19, 0xFF	; 255
    23c8:	b9 01       	movw	r22, r18
    23ca:	4a e0       	ldi	r20, 0x0A	; 10
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <itoa>
	for(u8 j=0;j<3;j++)
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	28 c0       	rjmp	.+80     	; 0x2426 <LCD_vid_num_to_str+0xba>
			{
		if(u8CharArr[j]<'0'||u8CharArr[j]>'9')
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	ce 01       	movw	r24, r28
    23de:	03 96       	adiw	r24, 0x03	; 3
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	80 81       	ld	r24, Z
    23e8:	80 33       	cpi	r24, 0x30	; 48
    23ea:	58 f0       	brcs	.+22     	; 0x2402 <LCD_vid_num_to_str+0x96>
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	ce 01       	movw	r24, r28
    23f4:	03 96       	adiw	r24, 0x03	; 3
    23f6:	fc 01       	movw	r30, r24
    23f8:	e2 0f       	add	r30, r18
    23fa:	f3 1f       	adc	r31, r19
    23fc:	80 81       	ld	r24, Z
    23fe:	8a 33       	cpi	r24, 0x3A	; 58
    2400:	20 f0       	brcs	.+8      	; 0x240a <LCD_vid_num_to_str+0x9e>
		{
			LCD_vidWriteChar(' ');
    2402:	80 e2       	ldi	r24, 0x20	; 32
    2404:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_vidWriteChar>
    2408:	0b c0       	rjmp	.+22     	; 0x2420 <LCD_vid_num_to_str+0xb4>
		}
		else
		{
			LCD_vidWriteChar(u8CharArr[j]);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	ce 01       	movw	r24, r28
    2412:	03 96       	adiw	r24, 0x03	; 3
    2414:	fc 01       	movw	r30, r24
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_vidWriteChar>
		{
			u8CharArr[j]=' ';
		}
		LCD_VidGotoRawCol(0,5);
	itoa(u8NumCopy,u8CharArr,10);
	for(u8 j=0;j<3;j++)
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	a8 f2       	brcs	.-86     	; 0x23d6 <LCD_vid_num_to_str+0x6a>
		{
			LCD_vidWriteChar(u8CharArr[j]);
		}
 			}
	}
}
    242c:	26 96       	adiw	r28, 0x06	; 6
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LED_vid_init>:
 */
#include "../../MCAL/DIO/DIO_int.h"
#include "LED_cfg.h"
#include "avr/delay.h"
void LED_vid_init(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDirection(LED_PORT,LED_PIN,OUTPUT);
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <LED_vid_toggle>:

void LED_vid_toggle(void)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	2e 97       	sbiw	r28, 0x0e	; 14
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
 DIO_SetPinValue(LED_PORT,LED_PIN,HIGH);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a8 e4       	ldi	r26, 0x48	; 72
    247a:	b3 e4       	ldi	r27, 0x43	; 67
    247c:	8b 87       	std	Y+11, r24	; 0x0b
    247e:	9c 87       	std	Y+12, r25	; 0x0c
    2480:	ad 87       	std	Y+13, r26	; 0x0d
    2482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6b 85       	ldd	r22, Y+11	; 0x0b
    2486:	7c 85       	ldd	r23, Y+12	; 0x0c
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	9e 85       	ldd	r25, Y+14	; 0x0e
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a ef       	ldi	r20, 0xFA	; 250
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	a9 87       	std	Y+9, r26	; 0x09
    24a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LED_vid_toggle+0x70>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LED_vid_toggle+0xee>
	else if (__tmp > 65535)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LED_vid_toggle+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LED_vid_toggle+0xd0>
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LED_vid_toggle+0xbe>
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LED_vid_toggle+0xb2>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LED_vid_toggle+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LED_vid_toggle+0xfa>
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(200);
 DIO_SetPinValue(LED_PORT,LED_PIN,LOW);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
}
    2562:	2e 96       	adiw	r28, 0x0e	; 14
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <LED_vid_LOW>:

void LED_vid_LOW(void)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinValue(LED_PORT,LED_PIN,LOW);
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
}
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LDR_vid_init>:
 *      Author: DELL
 */
#include "../../LIB/STD_Types.h"

void LDR_vid_init(void)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    2594:	0e 94 cf 0a 	call	0x159e	; 0x159e <ADC_init>
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <LDR_u32_value>:
u32 LDR_u32_value(u8 u8channelNumCopy )
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <LDR_u32_value+0x6>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <LDR_u32_value+0x8>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	8d 83       	std	Y+5, r24	; 0x05
	u32 Light;
	Light=u8ADC_Channel_Reading(u8channelNumCopy);
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	0e 94 94 0a 	call	0x1528	; 0x1528 <u8ADC_Channel_Reading>
    25b8:	aa 27       	eor	r26, r26
    25ba:	97 fd       	sbrc	r25, 7
    25bc:	a0 95       	com	r26
    25be:	ba 2f       	mov	r27, r26
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	ab 83       	std	Y+3, r26	; 0x03
    25c6:	bc 83       	std	Y+4, r27	; 0x04
			return Light;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	ab 81       	ldd	r26, Y+3	; 0x03
    25ce:	bc 81       	ldd	r27, Y+4	; 0x04
}
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <main>:
#include "../MCAL/ADC/ADC_int.h"
#include "../MCAL/timer1_PWM/timer1PWM_int.h"


int main (void)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	c0 54       	subi	r28, 0x40	; 64
    25ee:	d0 40       	sbci	r29, 0x00	; 0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
	LED_vid_init();
    25fa:	0e 94 1f 12 	call	0x243e	; 0x243e <LED_vid_init>
	LCD_vidInit();
    25fe:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vidInit>
	u32 temp,Light;
	LCD_vidInit();
    2602:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vidInit>
	LM35_vid_init();
    2606:	0e 94 07 0b 	call	0x160e	; 0x160e <LM35_vid_init>
	SERVO_init_vid(PORTD,PIN5);
    260a:	83 e0       	ldi	r24, 0x03	; 3
    260c:	65 e0       	ldi	r22, 0x05	; 5
    260e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <SERVO_init_vid>
	timer1_FAST_PWM_init_vid();
    2612:	0e 94 17 07 	call	0xe2e	; 0xe2e <timer1_FAST_PWM_init_vid>
	LDR_vid_init();
    2616:	0e 94 c6 12 	call	0x258c	; 0x258c <LDR_vid_init>

	LCD_vidSendCommand(LCD_CLEAR);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>

	DIO_SetPinDirection(PORTD,PIN7,OUTPUT);
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	67 e0       	ldi	r22, 0x07	; 7
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>
	/*fan*/
	DIO_SetPinDirection(PORTD,PIN4,OUTPUT);
    262a:	83 e0       	ldi	r24, 0x03	; 3
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_SetPinDirection>



	while(1)
	{
		temp=u8ADC_Channel_Reading(CHANNEL2);
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	0e 94 94 0a 	call	0x1528	; 0x1528 <u8ADC_Channel_Reading>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	fe 01       	movw	r30, r28
    2640:	fd 96       	adiw	r30, 0x3d	; 61
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
		temp= (temp*150*5)/(1023*1.5);
    264a:	fe 01       	movw	r30, r28
    264c:	fd 96       	adiw	r30, 0x3d	; 61
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	a2 81       	ldd	r26, Z+2	; 0x02
    2654:	b3 81       	ldd	r27, Z+3	; 0x03
    2656:	2e ee       	ldi	r18, 0xEE	; 238
    2658:	32 e0       	ldi	r19, 0x02	; 2
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__mulsi3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 ed       	ldi	r19, 0xD0	; 208
    267e:	4f eb       	ldi	r20, 0xBF	; 191
    2680:	54 e4       	ldi	r21, 0x44	; 68
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	fe 01       	movw	r30, r28
    2698:	fd 96       	adiw	r30, 0x3d	; 61
    269a:	80 83       	st	Z, r24
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	a2 83       	std	Z+2, r26	; 0x02
    26a0:	b3 83       	std	Z+3, r27	; 0x03


		if(temp<50)
    26a2:	fe 01       	movw	r30, r28
    26a4:	fd 96       	adiw	r30, 0x3d	; 61
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	a2 81       	ldd	r26, Z+2	; 0x02
    26ac:	b3 81       	ldd	r27, Z+3	; 0x03
    26ae:	82 33       	cpi	r24, 0x32	; 50
    26b0:	91 05       	cpc	r25, r1
    26b2:	a1 05       	cpc	r26, r1
    26b4:	b1 05       	cpc	r27, r1
    26b6:	08 f0       	brcs	.+2      	; 0x26ba <main+0xd6>
    26b8:	51 c0       	rjmp	.+162    	; 0x275c <main+0x178>
		{
			if (temp>30)
    26ba:	fe 01       	movw	r30, r28
    26bc:	fd 96       	adiw	r30, 0x3d	; 61
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	a2 81       	ldd	r26, Z+2	; 0x02
    26c4:	b3 81       	ldd	r27, Z+3	; 0x03
    26c6:	8f 31       	cpi	r24, 0x1F	; 31
    26c8:	91 05       	cpc	r25, r1
    26ca:	a1 05       	cpc	r26, r1
    26cc:	b1 05       	cpc	r27, r1
    26ce:	18 f1       	brcs	.+70     	; 0x2716 <main+0x132>
			{
				DIO_SetPinValue(PORTD,PIN4,HIGH);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	64 e0       	ldi	r22, 0x04	; 4
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
				DIO_SetPinValue(PORTD,PIN7,LOW);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	67 e0       	ldi	r22, 0x07	; 7
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
				LCD_VidGotoRawCol(0,0);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vidWriteString("Temp:");
    26ec:	80 e6       	ldi	r24, 0x60	; 96
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_vidWriteString>
				LCD_VidGotoRawCol(0,8);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	68 e0       	ldi	r22, 0x08	; 8
    26f8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vid_num_to_str(temp);
    26fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fe:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_vid_num_to_str>
				LCD_VidGotoRawCol(0,10);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	6a e0       	ldi	r22, 0x0A	; 10
    2706:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vidWriteChar('c');
    270a:	83 e6       	ldi	r24, 0x63	; 99
    270c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_vidWriteChar>
				LED_vid_LOW();
    2710:	0e 94 ba 12 	call	0x2574	; 0x2574 <LED_vid_LOW>
    2714:	23 c1       	rjmp	.+582    	; 0x295c <main+0x378>
			}
			else
			{
				DIO_SetPinValue(PORTD,PIN4,LOW);
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	64 e0       	ldi	r22, 0x04	; 4
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
				DIO_SetPinValue(PORTD,PIN7,LOW);
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	67 e0       	ldi	r22, 0x07	; 7
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
				LCD_VidGotoRawCol(0,0);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vidWriteString("Temp:");
    2732:	80 e6       	ldi	r24, 0x60	; 96
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_vidWriteString>
				LCD_VidGotoRawCol(0,8);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	68 e0       	ldi	r22, 0x08	; 8
    273e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vid_num_to_str(temp);
    2742:	8d ad       	ldd	r24, Y+61	; 0x3d
    2744:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_vid_num_to_str>
				LCD_VidGotoRawCol(0,10);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	6a e0       	ldi	r22, 0x0A	; 10
    274c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
				LCD_vidWriteChar('c');
    2750:	83 e6       	ldi	r24, 0x63	; 99
    2752:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_vidWriteChar>
				LED_vid_LOW();
    2756:	0e 94 ba 12 	call	0x2574	; 0x2574 <LED_vid_LOW>
    275a:	00 c1       	rjmp	.+512    	; 0x295c <main+0x378>

		}

		else
		{
			LED_vid_toggle();
    275c:	0e 94 2b 12 	call	0x2456	; 0x2456 <LED_vid_toggle>
			LCD_VidGotoRawCol(0,0);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_VidGotoRawCol>
			LCD_vidWriteString("WARNING !! FIRE!!");
    2768:	86 e6       	ldi	r24, 0x66	; 102
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_vidWriteString>
			DIO_SetPinValue(PORTD,PIN7,HIGH);
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	67 e0       	ldi	r22, 0x07	; 7
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a8 e4       	ldi	r26, 0x48	; 72
    2780:	b2 e4       	ldi	r27, 0x42	; 66
    2782:	8d ab       	std	Y+53, r24	; 0x35
    2784:	9e ab       	std	Y+54, r25	; 0x36
    2786:	af ab       	std	Y+55, r26	; 0x37
    2788:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6d a9       	ldd	r22, Y+53	; 0x35
    278c:	7e a9       	ldd	r23, Y+54	; 0x36
    278e:	8f a9       	ldd	r24, Y+55	; 0x37
    2790:	98 ad       	ldd	r25, Y+56	; 0x38
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a ef       	ldi	r20, 0xFA	; 250
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	89 ab       	std	Y+49, r24	; 0x31
    27a4:	9a ab       	std	Y+50, r25	; 0x32
    27a6:	ab ab       	std	Y+51, r26	; 0x33
    27a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27aa:	69 a9       	ldd	r22, Y+49	; 0x31
    27ac:	7a a9       	ldd	r23, Y+50	; 0x32
    27ae:	8b a9       	ldd	r24, Y+51	; 0x33
    27b0:	9c a9       	ldd	r25, Y+52	; 0x34
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <main+0x1e8>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	98 ab       	std	Y+48, r25	; 0x30
    27c8:	8f a7       	std	Y+47, r24	; 0x2f
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <main+0x266>
	else if (__tmp > 65535)
    27cc:	69 a9       	ldd	r22, Y+49	; 0x31
    27ce:	7a a9       	ldd	r23, Y+50	; 0x32
    27d0:	8b a9       	ldd	r24, Y+51	; 0x33
    27d2:	9c a9       	ldd	r25, Y+52	; 0x34
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6d a9       	ldd	r22, Y+53	; 0x35
    27e6:	7e a9       	ldd	r23, Y+54	; 0x36
    27e8:	8f a9       	ldd	r24, Y+55	; 0x37
    27ea:	98 ad       	ldd	r25, Y+56	; 0x38
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	98 ab       	std	Y+48, r25	; 0x30
    280a:	8f a7       	std	Y+47, r24	; 0x2f
    280c:	0f c0       	rjmp	.+30     	; 0x282c <main+0x248>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9e a7       	std	Y+46, r25	; 0x2e
    2814:	8d a7       	std	Y+45, r24	; 0x2d
    2816:	8d a5       	ldd	r24, Y+45	; 0x2d
    2818:	9e a5       	ldd	r25, Y+46	; 0x2e
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <main+0x236>
    281e:	9e a7       	std	Y+46, r25	; 0x2e
    2820:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8f a5       	ldd	r24, Y+47	; 0x2f
    2824:	98 a9       	ldd	r25, Y+48	; 0x30
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8f a5       	ldd	r24, Y+47	; 0x2f
    282e:	98 a9       	ldd	r25, Y+48	; 0x30
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <main+0x22a>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	69 a9       	ldd	r22, Y+49	; 0x31
    2838:	7a a9       	ldd	r23, Y+50	; 0x32
    283a:	8b a9       	ldd	r24, Y+51	; 0x33
    283c:	9c a9       	ldd	r25, Y+52	; 0x34
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	98 ab       	std	Y+48, r25	; 0x30
    2848:	8f a7       	std	Y+47, r24	; 0x2f
    284a:	8f a5       	ldd	r24, Y+47	; 0x2f
    284c:	98 a9       	ldd	r25, Y+48	; 0x30
    284e:	9c a7       	std	Y+44, r25	; 0x2c
    2850:	8b a7       	std	Y+43, r24	; 0x2b
    2852:	8b a5       	ldd	r24, Y+43	; 0x2b
    2854:	9c a5       	ldd	r25, Y+44	; 0x2c
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <main+0x272>
    285a:	9c a7       	std	Y+44, r25	; 0x2c
    285c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			DIO_SetPinValue(PORTD,PIN7,LOW);
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	67 e0       	ldi	r22, 0x07	; 7
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a8 e4       	ldi	r26, 0x48	; 72
    286e:	b2 e4       	ldi	r27, 0x42	; 66
    2870:	8f a3       	std	Y+39, r24	; 0x27
    2872:	98 a7       	std	Y+40, r25	; 0x28
    2874:	a9 a7       	std	Y+41, r26	; 0x29
    2876:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2878:	6f a1       	ldd	r22, Y+39	; 0x27
    287a:	78 a5       	ldd	r23, Y+40	; 0x28
    287c:	89 a5       	ldd	r24, Y+41	; 0x29
    287e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	4a ef       	ldi	r20, 0xFA	; 250
    2886:	54 e4       	ldi	r21, 0x44	; 68
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	8b a3       	std	Y+35, r24	; 0x23
    2892:	9c a3       	std	Y+36, r25	; 0x24
    2894:	ad a3       	std	Y+37, r26	; 0x25
    2896:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2898:	6b a1       	ldd	r22, Y+35	; 0x23
    289a:	7c a1       	ldd	r23, Y+36	; 0x24
    289c:	8d a1       	ldd	r24, Y+37	; 0x25
    289e:	9e a1       	ldd	r25, Y+38	; 0x26
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e8       	ldi	r20, 0x80	; 128
    28a6:	5f e3       	ldi	r21, 0x3F	; 63
    28a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	2c f4       	brge	.+10     	; 0x28ba <main+0x2d6>
		__ticks = 1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9a a3       	std	Y+34, r25	; 0x22
    28b6:	89 a3       	std	Y+33, r24	; 0x21
    28b8:	3f c0       	rjmp	.+126    	; 0x2938 <main+0x354>
	else if (__tmp > 65535)
    28ba:	6b a1       	ldd	r22, Y+35	; 0x23
    28bc:	7c a1       	ldd	r23, Y+36	; 0x24
    28be:	8d a1       	ldd	r24, Y+37	; 0x25
    28c0:	9e a1       	ldd	r25, Y+38	; 0x26
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	3f ef       	ldi	r19, 0xFF	; 255
    28c6:	4f e7       	ldi	r20, 0x7F	; 127
    28c8:	57 e4       	ldi	r21, 0x47	; 71
    28ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ce:	18 16       	cp	r1, r24
    28d0:	4c f5       	brge	.+82     	; 0x2924 <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d2:	6f a1       	ldd	r22, Y+39	; 0x27
    28d4:	78 a5       	ldd	r23, Y+40	; 0x28
    28d6:	89 a5       	ldd	r24, Y+41	; 0x29
    28d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	51 e4       	ldi	r21, 0x41	; 65
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9a a3       	std	Y+34, r25	; 0x22
    28f8:	89 a3       	std	Y+33, r24	; 0x21
    28fa:	0f c0       	rjmp	.+30     	; 0x291a <main+0x336>
    28fc:	88 ec       	ldi	r24, 0xC8	; 200
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	98 a3       	std	Y+32, r25	; 0x20
    2902:	8f 8f       	std	Y+31, r24	; 0x1f
    2904:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2906:	98 a1       	ldd	r25, Y+32	; 0x20
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <main+0x324>
    290c:	98 a3       	std	Y+32, r25	; 0x20
    290e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	89 a1       	ldd	r24, Y+33	; 0x21
    2912:	9a a1       	ldd	r25, Y+34	; 0x22
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291a:	89 a1       	ldd	r24, Y+33	; 0x21
    291c:	9a a1       	ldd	r25, Y+34	; 0x22
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	69 f7       	brne	.-38     	; 0x28fc <main+0x318>
    2922:	14 c0       	rjmp	.+40     	; 0x294c <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2924:	6b a1       	ldd	r22, Y+35	; 0x23
    2926:	7c a1       	ldd	r23, Y+36	; 0x24
    2928:	8d a1       	ldd	r24, Y+37	; 0x25
    292a:	9e a1       	ldd	r25, Y+38	; 0x26
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	9a a3       	std	Y+34, r25	; 0x22
    2936:	89 a3       	std	Y+33, r24	; 0x21
    2938:	89 a1       	ldd	r24, Y+33	; 0x21
    293a:	9a a1       	ldd	r25, Y+34	; 0x22
    293c:	9e 8f       	std	Y+30, r25	; 0x1e
    293e:	8d 8f       	std	Y+29, r24	; 0x1d
    2940:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2942:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <main+0x360>
    2948:	9e 8f       	std	Y+30, r25	; 0x1e
    294a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			LCD_vidSendCommand(LCD_CLEAR);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vidSendCommand>
			DIO_SetPinValue(PORTD,PIN4,HIGH);//fan
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	64 e0       	ldi	r22, 0x04	; 4
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_SetPinValue>

		}


		Light=u8ADC_Channel_Reading(CHANNEL3);
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	0e 94 94 0a 	call	0x1528	; 0x1528 <u8ADC_Channel_Reading>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	89 af       	std	Y+57, r24	; 0x39
    2968:	9a af       	std	Y+58, r25	; 0x3a
    296a:	ab af       	std	Y+59, r26	; 0x3b
    296c:	bc af       	std	Y+60, r27	; 0x3c
		if(Light>70)
    296e:	89 ad       	ldd	r24, Y+57	; 0x39
    2970:	9a ad       	ldd	r25, Y+58	; 0x3a
    2972:	ab ad       	ldd	r26, Y+59	; 0x3b
    2974:	bc ad       	ldd	r27, Y+60	; 0x3c
    2976:	87 34       	cpi	r24, 0x47	; 71
    2978:	91 05       	cpc	r25, r1
    297a:	a1 05       	cpc	r26, r1
    297c:	b1 05       	cpc	r27, r1
    297e:	08 f4       	brcc	.+2      	; 0x2982 <main+0x39e>
    2980:	77 c0       	rjmp	.+238    	; 0x2a70 <main+0x48c>
		{
			Timer_set_dutyCycle(124);
    2982:	8c e7       	ldi	r24, 0x7C	; 124
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 59 07 	call	0xeb2	; 0xeb2 <Timer_set_dutyCycle>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e8       	ldi	r25, 0x80	; 128
    298e:	ab eb       	ldi	r26, 0xBB	; 187
    2990:	b4 e4       	ldi	r27, 0x44	; 68
    2992:	89 8f       	std	Y+25, r24	; 0x19
    2994:	9a 8f       	std	Y+26, r25	; 0x1a
    2996:	ab 8f       	std	Y+27, r26	; 0x1b
    2998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	69 8d       	ldd	r22, Y+25	; 0x19
    299c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    299e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a ef       	ldi	r20, 0xFA	; 250
    29a8:	54 e4       	ldi	r21, 0x44	; 68
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8d 8b       	std	Y+21, r24	; 0x15
    29b4:	9e 8b       	std	Y+22, r25	; 0x16
    29b6:	af 8b       	std	Y+23, r26	; 0x17
    29b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ba:	6d 89       	ldd	r22, Y+21	; 0x15
    29bc:	7e 89       	ldd	r23, Y+22	; 0x16
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	98 8d       	ldd	r25, Y+24	; 0x18
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <main+0x3f8>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 8b       	std	Y+20, r25	; 0x14
    29d8:	8b 8b       	std	Y+19, r24	; 0x13
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <main+0x476>
	else if (__tmp > 65535)
    29dc:	6d 89       	ldd	r22, Y+21	; 0x15
    29de:	7e 89       	ldd	r23, Y+22	; 0x16
    29e0:	8f 89       	ldd	r24, Y+23	; 0x17
    29e2:	98 8d       	ldd	r25, Y+24	; 0x18
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	69 8d       	ldd	r22, Y+25	; 0x19
    29f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <main+0x458>
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9a 8b       	std	Y+18, r25	; 0x12
    2a24:	89 8b       	std	Y+17, r24	; 0x11
    2a26:	89 89       	ldd	r24, Y+17	; 0x11
    2a28:	9a 89       	ldd	r25, Y+18	; 0x12
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <main+0x446>
    2a2e:	9a 8b       	std	Y+18, r25	; 0x12
    2a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9c 8b       	std	Y+20, r25	; 0x14
    2a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <main+0x43a>
    2a44:	f7 cd       	rjmp	.-1042   	; 0x2634 <main+0x50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6d 89       	ldd	r22, Y+21	; 0x15
    2a48:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9c 8b       	std	Y+20, r25	; 0x14
    2a58:	8b 8b       	std	Y+19, r24	; 0x13
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	98 8b       	std	Y+16, r25	; 0x10
    2a60:	8f 87       	std	Y+15, r24	; 0x0f
    2a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a64:	98 89       	ldd	r25, Y+16	; 0x10
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <main+0x482>
    2a6a:	98 8b       	std	Y+16, r25	; 0x10
    2a6c:	8f 87       	std	Y+15, r24	; 0x0f
    2a6e:	e2 cd       	rjmp	.-1084   	; 0x2634 <main+0x50>
			_delay_ms(1500);
		}
		else
		{
			Timer_set_dutyCycle(250);
    2a70:	8a ef       	ldi	r24, 0xFA	; 250
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 59 07 	call	0xeb2	; 0xeb2 <Timer_set_dutyCycle>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e8       	ldi	r25, 0x80	; 128
    2a7c:	ab eb       	ldi	r26, 0xBB	; 187
    2a7e:	b4 e4       	ldi	r27, 0x44	; 68
    2a80:	8b 87       	std	Y+11, r24	; 0x0b
    2a82:	9c 87       	std	Y+12, r25	; 0x0c
    2a84:	ad 87       	std	Y+13, r26	; 0x0d
    2a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8f 83       	std	Y+7, r24	; 0x07
    2aa2:	98 87       	std	Y+8, r25	; 0x08
    2aa4:	a9 87       	std	Y+9, r26	; 0x09
    2aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <main+0x4e6>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <main+0x564>
	else if (__tmp > 65535)
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <main+0x550>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <main+0x546>
    2b0c:	88 ec       	ldi	r24, 0xC8	; 200
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9c 83       	std	Y+4, r25	; 0x04
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <main+0x534>
    2b1c:	9c 83       	std	Y+4, r25	; 0x04
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <main+0x528>
    2b32:	80 cd       	rjmp	.-1280   	; 0x2634 <main+0x50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	6f 81       	ldd	r22, Y+7	; 0x07
    2b36:	78 85       	ldd	r23, Y+8	; 0x08
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <main+0x570>
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	6b cd       	rjmp	.-1322   	; 0x2634 <main+0x50>

00002b5e <__mulsi3>:
    2b5e:	62 9f       	mul	r22, r18
    2b60:	d0 01       	movw	r26, r0
    2b62:	73 9f       	mul	r23, r19
    2b64:	f0 01       	movw	r30, r0
    2b66:	82 9f       	mul	r24, r18
    2b68:	e0 0d       	add	r30, r0
    2b6a:	f1 1d       	adc	r31, r1
    2b6c:	64 9f       	mul	r22, r20
    2b6e:	e0 0d       	add	r30, r0
    2b70:	f1 1d       	adc	r31, r1
    2b72:	92 9f       	mul	r25, r18
    2b74:	f0 0d       	add	r31, r0
    2b76:	83 9f       	mul	r24, r19
    2b78:	f0 0d       	add	r31, r0
    2b7a:	74 9f       	mul	r23, r20
    2b7c:	f0 0d       	add	r31, r0
    2b7e:	65 9f       	mul	r22, r21
    2b80:	f0 0d       	add	r31, r0
    2b82:	99 27       	eor	r25, r25
    2b84:	72 9f       	mul	r23, r18
    2b86:	b0 0d       	add	r27, r0
    2b88:	e1 1d       	adc	r30, r1
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	63 9f       	mul	r22, r19
    2b8e:	b0 0d       	add	r27, r0
    2b90:	e1 1d       	adc	r30, r1
    2b92:	f9 1f       	adc	r31, r25
    2b94:	bd 01       	movw	r22, r26
    2b96:	cf 01       	movw	r24, r30
    2b98:	11 24       	eor	r1, r1
    2b9a:	08 95       	ret

00002b9c <__prologue_saves__>:
    2b9c:	2f 92       	push	r2
    2b9e:	3f 92       	push	r3
    2ba0:	4f 92       	push	r4
    2ba2:	5f 92       	push	r5
    2ba4:	6f 92       	push	r6
    2ba6:	7f 92       	push	r7
    2ba8:	8f 92       	push	r8
    2baa:	9f 92       	push	r9
    2bac:	af 92       	push	r10
    2bae:	bf 92       	push	r11
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	ca 1b       	sub	r28, r26
    2bc6:	db 0b       	sbc	r29, r27
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	09 94       	ijmp

00002bd4 <__epilogue_restores__>:
    2bd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2bd6:	39 88       	ldd	r3, Y+17	; 0x11
    2bd8:	48 88       	ldd	r4, Y+16	; 0x10
    2bda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2be0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2be2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2be4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2be6:	b9 84       	ldd	r11, Y+9	; 0x09
    2be8:	c8 84       	ldd	r12, Y+8	; 0x08
    2bea:	df 80       	ldd	r13, Y+7	; 0x07
    2bec:	ee 80       	ldd	r14, Y+6	; 0x06
    2bee:	fd 80       	ldd	r15, Y+5	; 0x05
    2bf0:	0c 81       	ldd	r16, Y+4	; 0x04
    2bf2:	1b 81       	ldd	r17, Y+3	; 0x03
    2bf4:	aa 81       	ldd	r26, Y+2	; 0x02
    2bf6:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf8:	ce 0f       	add	r28, r30
    2bfa:	d1 1d       	adc	r29, r1
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	ed 01       	movw	r28, r26
    2c08:	08 95       	ret

00002c0a <itoa>:
    2c0a:	fb 01       	movw	r30, r22
    2c0c:	9f 01       	movw	r18, r30
    2c0e:	e8 94       	clt
    2c10:	42 30       	cpi	r20, 0x02	; 2
    2c12:	c4 f0       	brlt	.+48     	; 0x2c44 <itoa+0x3a>
    2c14:	45 32       	cpi	r20, 0x25	; 37
    2c16:	b4 f4       	brge	.+44     	; 0x2c44 <itoa+0x3a>
    2c18:	4a 30       	cpi	r20, 0x0A	; 10
    2c1a:	29 f4       	brne	.+10     	; 0x2c26 <itoa+0x1c>
    2c1c:	97 fb       	bst	r25, 7
    2c1e:	1e f4       	brtc	.+6      	; 0x2c26 <itoa+0x1c>
    2c20:	90 95       	com	r25
    2c22:	81 95       	neg	r24
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	64 2f       	mov	r22, r20
    2c28:	77 27       	eor	r23, r23
    2c2a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__udivmodhi4>
    2c2e:	80 5d       	subi	r24, 0xD0	; 208
    2c30:	8a 33       	cpi	r24, 0x3A	; 58
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <itoa+0x2c>
    2c34:	89 5d       	subi	r24, 0xD9	; 217
    2c36:	81 93       	st	Z+, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	a1 f7       	brne	.-24     	; 0x2c26 <itoa+0x1c>
    2c3e:	16 f4       	brtc	.+4      	; 0x2c44 <itoa+0x3a>
    2c40:	5d e2       	ldi	r21, 0x2D	; 45
    2c42:	51 93       	st	Z+, r21
    2c44:	10 82       	st	Z, r1
    2c46:	c9 01       	movw	r24, r18
    2c48:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <strrev>

00002c4c <strrev>:
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	fc 01       	movw	r30, r24
    2c50:	67 2f       	mov	r22, r23
    2c52:	71 91       	ld	r23, Z+
    2c54:	77 23       	and	r23, r23
    2c56:	e1 f7       	brne	.-8      	; 0x2c50 <strrev+0x4>
    2c58:	32 97       	sbiw	r30, 0x02	; 2
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <strrev+0x18>
    2c5c:	7c 91       	ld	r23, X
    2c5e:	6d 93       	st	X+, r22
    2c60:	70 83       	st	Z, r23
    2c62:	62 91       	ld	r22, -Z
    2c64:	ae 17       	cp	r26, r30
    2c66:	bf 07       	cpc	r27, r31
    2c68:	c8 f3       	brcs	.-14     	; 0x2c5c <strrev+0x10>
    2c6a:	08 95       	ret

00002c6c <__udivmodhi4>:
    2c6c:	aa 1b       	sub	r26, r26
    2c6e:	bb 1b       	sub	r27, r27
    2c70:	51 e1       	ldi	r21, 0x11	; 17
    2c72:	07 c0       	rjmp	.+14     	; 0x2c82 <__udivmodhi4_ep>

00002c74 <__udivmodhi4_loop>:
    2c74:	aa 1f       	adc	r26, r26
    2c76:	bb 1f       	adc	r27, r27
    2c78:	a6 17       	cp	r26, r22
    2c7a:	b7 07       	cpc	r27, r23
    2c7c:	10 f0       	brcs	.+4      	; 0x2c82 <__udivmodhi4_ep>
    2c7e:	a6 1b       	sub	r26, r22
    2c80:	b7 0b       	sbc	r27, r23

00002c82 <__udivmodhi4_ep>:
    2c82:	88 1f       	adc	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	5a 95       	dec	r21
    2c88:	a9 f7       	brne	.-22     	; 0x2c74 <__udivmodhi4_loop>
    2c8a:	80 95       	com	r24
    2c8c:	90 95       	com	r25
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	08 95       	ret

00002c94 <_exit>:
    2c94:	f8 94       	cli

00002c96 <__stop_program>:
    2c96:	ff cf       	rjmp	.-2      	; 0x2c96 <__stop_program>
